import { BaseLoginProvider } from "../entities/base-login-provider";
import { SocialUser } from "../entities/social-user";
/**
 * Protocol modes supported by MSAL.
 */
export var ProtocolMode;
(function (ProtocolMode) {
  ProtocolMode["AAD"] = "AAD";
  ProtocolMode["OIDC"] = "OIDC";
})(ProtocolMode || (ProtocolMode = {}));
const COMMON_AUTHORITY = "https://login.microsoftonline.com/common/";
/**
 * Microsoft Authentication using MSAL v2: https://github.com/AzureAD/microsoft-authentication-library-for-js/tree/dev/lib/msal-browser
 */
export class MicrosoftLoginProvider extends BaseLoginProvider {
  constructor(clientId, initOptions) {
    super();
    this.clientId = clientId;
    this.initOptions = {
      authority: COMMON_AUTHORITY,
      scopes: ["openid", "email", "profile", "User.Read"],
      knownAuthorities: [],
      protocolMode: ProtocolMode.AAD,
      clientCapabilities: [],
      cacheLocation: "sessionStorage",
    };
    this.initOptions = {
      ...this.initOptions,
      ...initOptions,
    };
  }
  static {
    this.PROVIDER_ID = "MICROSOFT";
  }
  initialize() {
    return new Promise((resolve, reject) => {
      this.loadScript(
        MicrosoftLoginProvider.PROVIDER_ID,
        "https://alcdn.msauth.net/browser/2.30.0/js/msal-browser.min.js",
        () => {
          try {
            const config = {
              auth: {
                clientId: this.clientId,
                redirectUri: this.initOptions.redirect_uri ?? location.origin,
                authority: this.initOptions.authority,
                knownAuthorities: this.initOptions.knownAuthorities,
                protocolMode: this.initOptions.protocolMode,
                clientCapabilities: this.initOptions.clientCapabilities,
              },
              cache: !this.initOptions.cacheLocation
                ? null
                : {
                    cacheLocation: this.initOptions.cacheLocation,
                  },
            };
            this._instance = new msal.PublicClientApplication(config);
            resolve();
          } catch (e) {
            reject(e);
          }
        }
      );
    });
  }
  getSocialUser(loginResponse) {
    return new Promise((resolve, reject) => {
      //After login, use Microsoft Graph API to get user info
      let meRequest = new XMLHttpRequest();
      meRequest.onreadystatechange = () => {
        if (meRequest.readyState == 4) {
          try {
            if (meRequest.status == 200) {
              let userInfo = JSON.parse(meRequest.responseText);
              let user = new SocialUser();
              user.provider = MicrosoftLoginProvider.PROVIDER_ID;
              user.id = loginResponse.idToken;
              user.authToken = loginResponse.accessToken;
              user.name = loginResponse.idTokenClaims.name;
              user.email = loginResponse.account.username;
              user.idToken = loginResponse.idToken;
              user.response = loginResponse;
              user.firstName = userInfo.givenName;
              user.lastName = userInfo.surname;
              resolve(user);
            } else {
              reject(`Error retrieving user info: ${meRequest.status}`);
            }
          } catch (err) {
            reject(err);
          }
        }
      };
      //Microsoft Graph ME Endpoint: https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http
      meRequest.open("GET", "https://graph.microsoft.com/v1.0/me");
      meRequest.setRequestHeader(
        "Authorization",
        `Bearer ${loginResponse.accessToken}`
      );
      try {
        meRequest.send();
      } catch (err) {
        reject(err);
      }
    });
  }
  async getLoginStatus() {
    const accounts = this._instance.getAllAccounts();
    if (accounts?.length > 0) {
      const loginResponse = await this._instance.ssoSilent({
        scopes: this.initOptions.scopes,
        loginHint: accounts[0].username,
      });
      return await this.getSocialUser(loginResponse);
    } else {
      throw `No user is currently logged in with ${MicrosoftLoginProvider.PROVIDER_ID}`;
    }
  }
  async signIn() {
    const loginResponse = await this._instance.loginPopup({
      scopes: this.initOptions.scopes,
      prompt: this.initOptions.prompt,
    });
    return await this.getSocialUser(loginResponse);
  }
  async signOut(revoke) {
    const accounts = this._instance.getAllAccounts();
    if (accounts?.length > 0) {
      await this._instance.logoutPopup({
        account: accounts[0],
        postLogoutRedirectUri:
          this.initOptions.logout_redirect_uri ??
          this.initOptions.redirect_uri ??
          location.href,
      });
    }
  }
}
//# sourceMappingURL=data:application/json;base64,
