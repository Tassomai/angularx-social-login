import { BaseLoginProvider } from '../entities/base-login-provider';
import { SocialUser } from '../entities/social-user';
const permissionTypes = {
    notify: 1,
    friends: 2,
    photos: 4,
    audio: 8,
    video: 16,
    offers: 32,
    questions: 64,
    pages: 128,
    links: 256,
    status: 1024,
    notes: 2048,
    messages: 4096,
    wall: 8192,
    ads: 32768,
    offline: 65536,
    docs: 131072,
    groups: 262144,
    notifications: 524288,
    stats: 1048576,
    email: 4194304,
    market: 134217728
};
export class VKLoginProvider extends BaseLoginProvider {
    constructor(clientId, initOptions = {
        fields: 'photo_max,contacts',
        version: '5.131',
    }) {
        super();
        this.clientId = clientId;
        this.initOptions = initOptions;
        this.VK_API_URL = '//vk.com/js/api/openapi.js';
        this.VK_API_GET_USER = 'users.get';
    }
    initialize() {
        return new Promise((resolve, reject) => {
            try {
                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {
                    VK.init({
                        apiId: this.clientId,
                    });
                    resolve();
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    getLoginStatus() {
        return new Promise((resolve) => this.getLoginStatusInternal(resolve));
    }
    signIn(permissions) {
        if (permissions?.includes('offers')) {
            console.warn('The "offers" permission is outdated.');
        }
        if (permissions?.includes('questions')) {
            console.warn('The "questions" permission is outdated.');
        }
        if (permissions?.includes('messages')) {
            console.warn('The "messages" permission is unavailable for non-standalone applications.');
        }
        const scope = permissions?.reduce((accumulator, current) => {
            const index = Object.keys(permissionTypes).findIndex(pt => pt === current);
            return index > -1 ? accumulator + permissionTypes[current] : 0;
        }, 0);
        return new Promise((resolve) => this.signInInternal(resolve, scope));
    }
    signOut() {
        return new Promise((resolve) => {
            VK.Auth.logout(() => {
                resolve();
            });
        });
    }
    signInInternal(resolve, scope) {
        VK.Auth.login((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        }, scope);
    }
    getUser(userId, token, resolve) {
        VK.Api.call(this.VK_API_GET_USER, {
            user_id: userId,
            fields: this.initOptions.fields,
            v: this.initOptions.version,
        }, (userResponse) => {
            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));
        });
    }
    getLoginStatusInternal(resolve) {
        VK.Auth.getLoginStatus((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        });
    }
    createUser(response) {
        const user = new SocialUser();
        user.id = response.id;
        user.name = `${response.first_name} ${response.last_name}`;
        user.photoUrl = response.photo_max;
        user.authToken = response.token;
        return user;
    }
}
VKLoginProvider.PROVIDER_ID = 'VK';
//# sourceMappingURL=data:application/json;base64,